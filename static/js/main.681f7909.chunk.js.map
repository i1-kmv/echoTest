{"version":3,"sources":["components/Input.tsx","components/Button.tsx","api/form-api.ts","store/auth-reducer.ts","utils/ErrorSnackbar.tsx","store/registration-reducer.ts","pages/Auth.tsx","store/recovery-reducer.ts","pages/PasswordRecovery.tsx","pages/Registration.tsx","pages/PersonArea.tsx","utils/smsAlert.tsx","pages/SmsConfirm.tsx","pages/Password.tsx","App.tsx","store/store.ts","index.tsx"],"names":["Input","props","className","type","placeholder","formikProps","Button","title","instance","axios","create","baseURL","formApi","data","Promise","res","rej","phone","password","confirmPhone","sms","first_name","avatar","post","initialState","isLoggedIn","registerMode","isInitialized","passwordRecoveryMode","error","authPhone","setIsLoggedInAC","value","setRegisterModeAC","setPasswordRecoveryModeAC","setAppErrorAC","setAppIsInitializedAC","Alert","elevation","variant","ErrorSnackbar","useSelector","state","auth","dispatch","useDispatch","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","authMode","setNewUserModeAC","user","setAuthModeAC","Auth","formik","useFormik","initialValues","validate","values","errors","onSubmit","then","catch","err","to","handleSubmit","name","getFieldProps","onClick","phoneConfirm","smsConfirm","setPhoneConfirmAC","setSmsConfirmAC","PasswordRecovery","confirmPhoneFormik","console","log","register","recovery","Registration","setUserAC","PersonArea","useEffect","useStyles","makeStyles","theme","root","width","marginTop","spacing","CustomizedSnackbars","React","useState","setOpen","anchorOrigin","vertical","horizontal","SmsConfirm","SmsFormik","Password","App","exact","path","render","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.681f7909.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n    return (\r\n            <input\r\n                className={`${props.className} input `}\r\n                type={props.type}\r\n                placeholder={props.placeholder}\r\n                {...props.formikProps}\r\n            />\r\n    )\r\n}\r\n\r\n\r\ntype InputPropsType = {\r\n    type: string\r\n    placeholder: string\r\n    className: string\r\n    formikProps?: object\r\n    name?: string\r\n}","import React from \"react\"\r\n\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    return (\r\n        <button className={`${props.className} button`} type={\"submit\"}>{props.title}</button>\r\n    )\r\n}\r\n\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    className: string\r\n    onClick? : () => void\r\n}\r\n","import axios from \"axios\";\r\nimport {FormikErrorType} from \"../pages/Auth\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'someBaseUrl/api'\r\n})\r\n\r\nexport const formApi = {\r\n    login_mock(data: FormikErrorType) {\r\n        return new Promise((res, rej) => {\r\n            if (data.phone === '+7 999 999-99-99' && data.password === '1234567890') {\r\n                res(true)\r\n            } else {\r\n                rej('Введен неверный номер телефона или пароль!')\r\n            }\r\n        })\r\n    },\r\n    confirm_phone_mock(data: FormikErrorType) {\r\n        return new Promise((res, rej) => {\r\n            if (data.confirmPhone === '+7 999 999-99-99') {\r\n                res(true)\r\n            } else {\r\n                rej('Неверный номер телефона')\r\n            }\r\n        })\r\n    },\r\n    confirm_sms_mock(data: FormikErrorType) {\r\n        return new Promise((res, rej) => {\r\n            if (data.sms === '5555') {\r\n                res(true)\r\n            } else {\r\n                rej('Неверный код')\r\n            }\r\n        })\r\n    },\r\n    register_mock(phone: string, password: string, first_name:string, avatar:string) {\r\n        return instance.post<ResponseUserType>(`user/registration`, {phone, password, first_name, avatar})\r\n    }\r\n}\r\n\r\ntype ResponseUserType = {\r\n    id: number,\r\n    phone: string,\r\n    first_name: string,\r\n    last_name?: string,\r\n    avatar: string\r\n}","import {Dispatch} from \"redux\"\r\nimport {formApi} from \"../api/form-api\"\r\nimport { FormikErrorType } from \"../pages/Auth\"\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    registerMode: false,\r\n    isInitialized: false,\r\n    passwordRecoveryMode: false,\r\n    error: null as string | null,\r\n    authPhone: ''\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        case 'login/SET-REGISTER-MODE':\r\n            return {...state, registerMode: action.value}\r\n        case 'login/SET-PASSWORD-RECOVERY-MODE':\r\n            return {...state, passwordRecoveryMode: action.value}\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.value}\r\n        case \"APP/SET-AUTH-PHONE\":\r\n            return {...state, authPhone: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const loginTC = (data: FormikErrorType) => (dispatch: Dispatch) => {\r\n    formApi.login_mock(data)\r\n        .then(res => {\r\n            dispatch(setIsLoggedInAC(true))\r\n        }).catch(err => {\r\n        dispatch(setAppErrorAC(err))\r\n        dispatch(setAppIsInitializedAC(true))\r\n    })\r\n}\r\n\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\nexport const setRegisterModeAC = (value: boolean) => ({type: 'login/SET-REGISTER-MODE', value} as const)\r\nexport const setPasswordRecoveryModeAC = (value: boolean) => ({type: 'login/SET-PASSWORD-RECOVERY-MODE', value} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppIsInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIZED', value} as const)\r\nexport const setAuthPhoneAC = (value: string) => ({type: 'APP/SET-AUTH-PHONE', value} as const)\r\n\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof setIsLoggedInAC> |\r\n    ReturnType<typeof setRegisterModeAC> |\r\n    ReturnType<typeof setPasswordRecoveryModeAC> |\r\n    ReturnType<typeof setAppErrorAC> |\r\n    ReturnType<typeof setAppIsInitializedAC> |\r\n    ReturnType<typeof setAuthPhoneAC>\r\n\r\ntype InitialStateType = typeof initialState","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from \"../store/store\";\r\nimport {setAppErrorAC} from \"../store/auth-reducer\";\r\n\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.auth.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" className=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {formApi} from \"../api/form-api\";\r\nimport {setAppErrorAC} from \"./auth-reducer\";\r\n\r\nconst initialState = {\r\n    authMode: false,\r\n    setNewUserModeAC: false,\r\n    user: {\r\n        phone: '',\r\n        password: '',\r\n        first_name: '',\r\n        avatar: ''\r\n    }\r\n}\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'register/SET-AUTH-NODE':\r\n            return {...state, authMode: action.value}\r\n        case 'register/SET-NEW-USER':\r\n            return {...state, user: {phone : action.phone, password: action.password, first_name: action.first_name, avatar:action.avatar}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthModeAC = (value: boolean) => ({type: 'register/SET-AUTH-NODE', value} as const)\r\nexport const setNewUserModeAC = (value: boolean) => ({type: 'register/SET-NEW-USER-NODE', value} as const)\r\nexport const setUserAC = (phone: string, password: string, first_name:string, avatar:string) => ({type: 'register/SET-NEW-USER', phone, password, first_name,avatar} as const)\r\n\r\n\r\nexport const registerTC = (phone: string, password: string, first_name:string, avatar:string) => (dispatch: Dispatch) => {\r\n    formApi.register_mock(phone, password, first_name, avatar)\r\n        .then(res => {\r\n            dispatch(setNewUserModeAC(true))\r\n        }).catch(err => {\r\n        dispatch(setUserAC(phone, password, first_name, avatar))\r\n        dispatch(setAppErrorAC(err))\r\n    })\r\n}\r\n\r\n\r\ntype ActionsType = ReturnType<typeof setAuthModeAC> | ReturnType<typeof setUserAC> |  ReturnType<typeof setNewUserModeAC>\r\n\r\ntype InitialStateType = typeof initialState","import React from \"react\"\r\nimport {Input} from \"../components/Input\"\r\nimport {Button} from \"../components/Button\"\r\nimport {AppRootStateType} from \"../store/store\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport {loginTC, setPasswordRecoveryModeAC, setRegisterModeAC} from \"../store/auth-reducer\"\r\nimport {useFormik} from \"formik\";\r\nimport { ErrorSnackbar } from \"../utils/ErrorSnackbar\"\r\nimport {setAuthModeAC} from \"../store/registration-reducer\"\r\n\r\n\r\nexport const Auth = () => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            phone: '',\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.phone) {\r\n                errors.phone = 'Обязательное поле!';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Обязательное поле!';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(loginTC(values))\r\n        }\r\n    })\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const registerMode = useSelector<AppRootStateType, boolean>(state => state.auth.registerMode)\r\n    const passwordRecoveryMode = useSelector<AppRootStateType, boolean>(state => state.auth.passwordRecoveryMode)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.auth.isInitialized)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const registerModeHandler = () => {\r\n        dispatch(setRegisterModeAC(true))\r\n        dispatch(setAuthModeAC(false))\r\n        dispatch(setPasswordRecoveryModeAC(false))\r\n    }\r\n\r\n    const passwordRecoveryModeHandler = () => {\r\n        dispatch(setPasswordRecoveryModeAC(true))\r\n        dispatch(setRegisterModeAC(false))\r\n        dispatch(setAuthModeAC(false))\r\n    }\r\n\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/cabinet'}/>\r\n    }\r\n\r\n    if (registerMode) {\r\n        return <Redirect to={'/registration'}/>\r\n    }\r\n\r\n    if (passwordRecoveryMode) {\r\n        return <Redirect to={'/recovery'}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <form className='auth-form form' onSubmit={formik.handleSubmit}>\r\n            {isInitialized && <ErrorSnackbar/>}\r\n            <div className='auth-form__inputs inputs'>\r\n                {formik.errors.phone ? <div className=\"formik\">{formik.errors.phone}</div> : null}\r\n                <Input\r\n                    className='auth-form__inputs-item input'\r\n                    type=\"text\"\r\n                    name=\"phone\"\r\n                    placeholder=\"Введите ваш номер телефона\"\r\n                    formikProps={{...formik.getFieldProps('phone')}}\r\n                />\r\n                {formik.errors.password ? <div className=\"formik\">{formik.errors.password}</div> : null}\r\n                <Input\r\n                    className='auth-form__inputs-item input'\r\n                    type=\"password\"\r\n                    placeholder=\"Введите ваш пароль\"\r\n                    formikProps={{...formik.getFieldProps('password')}}\r\n                />\r\n            </div>\r\n            <div className='auth-form__save'>\r\n                <input type=\"checkbox\"/>\r\n                <span>Запомнить меня</span>\r\n            </div>\r\n            <Button className='auth-form__button button' title='Войти'/>\r\n            <div className='auth-form__links links'>\r\n                <a className=\"links-item\" onClick={passwordRecoveryModeHandler}>Забыли пароль?</a>\r\n                <a className=\"links-item\" onClick={registerModeHandler}>Регистрация</a>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport type FormikErrorType = {\r\n    phone?: string | undefined\r\n    password?: string\r\n    code?: string\r\n    confirmPhone?:string,\r\n    sms?:string\r\n    name?:string\r\n    avatar?:string\r\n}","import {formApi} from \"../api/form-api\"\r\nimport {setAppErrorAC, setAppIsInitializedAC} from \"./auth-reducer\"\r\nimport {FormikErrorType} from \"../pages/Auth\"\r\nimport {Dispatch} from \"redux\"\r\n\r\n\r\nconst initialState = {\r\n    phoneConfirm: false,\r\n    smsConfirm: false\r\n}\r\n\r\n\r\nexport const recoveryReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'confirm/SET-PHONE-CONFIRM':\r\n            return {...state, phoneConfirm: action.value}\r\n        case 'confirm/SET-SMS-CONFIRM':\r\n            return {...state, smsConfirm: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setPhoneConfirmAC = (value: boolean) => ({type: 'confirm/SET-PHONE-CONFIRM', value} as const)\r\nexport const setSmsConfirmAC = (value: boolean) => ({type: 'confirm/SET-SMS-CONFIRM', value} as const)\r\n\r\n\r\nexport const confirmPhoneTC = (data: FormikErrorType) => (dispatch: Dispatch) => {\r\n    console.log(data)\r\n    formApi.confirm_phone_mock(data)\r\n        .then(res => {\r\n            dispatch(setPhoneConfirmAC(true))\r\n        }).catch(err => {\r\n            console.log('reg')\r\n        dispatch(setAppIsInitializedAC(true))\r\n        dispatch(setAppErrorAC(err))\r\n    })\r\n}\r\n\r\nexport const confirmSmsTC = (data: FormikErrorType) => (dispatch: Dispatch) => {\r\n    formApi.confirm_sms_mock(data)\r\n        .then(res => {\r\n            dispatch(setSmsConfirmAC(true))\r\n        }).catch(err => {\r\n        dispatch(setAppIsInitializedAC(true))\r\n        dispatch(setAppErrorAC(err))\r\n    })\r\n}\r\n\r\n\r\ntype ActionsType = ReturnType<typeof setPhoneConfirmAC> | ReturnType<typeof setSmsConfirmAC>\r\n\r\ntype InitialStateType = typeof initialState","import React from \"react\"\r\nimport {Input} from \"../components/Input\"\r\nimport {Button} from \"../components/Button\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../store/store\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {setPasswordRecoveryModeAC, setRegisterModeAC} from \"../store/auth-reducer\"\r\nimport {setAuthModeAC} from \"../store/registration-reducer\"\r\nimport {confirmPhoneTC} from \"../store/recovery-reducer\"\r\nimport {useFormik} from \"formik\"\r\nimport {FormikErrorType} from \"./Auth\"\r\nimport {ErrorSnackbar} from \"../utils/ErrorSnackbar\"\r\n\r\n\r\nexport const PasswordRecovery = () => {\r\n\r\n    const confirmPhoneFormik = useFormik({\r\n        initialValues: {\r\n            confirmPhone: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.confirmPhone) {\r\n                errors.confirmPhone = 'Обязательное поле!';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (value) => {\r\n            dispatch(confirmPhoneTC(value))\r\n        }\r\n    })\r\n\r\n    const registerMode = useSelector<AppRootStateType, boolean>(state => state.auth.registerMode)\r\n    const authMode = useSelector<AppRootStateType, boolean>(state => state.register.authMode)\r\n    const phoneConfirm = useSelector<AppRootStateType, boolean>(state => state.recovery.phoneConfirm)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.auth.isInitialized)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const registerModeHandler = () => {\r\n        dispatch(setRegisterModeAC(true))\r\n        dispatch(setPasswordRecoveryModeAC(false))\r\n    }\r\n\r\n    const passwordAuthModeHandler = () => {\r\n        dispatch(setAuthModeAC(true))\r\n        dispatch(setRegisterModeAC(false))\r\n        dispatch(setPasswordRecoveryModeAC(false))\r\n    }\r\n\r\n    if (registerMode) {\r\n        return <Redirect to={'/registration'}/>\r\n    }\r\n\r\n    if (authMode) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    if (phoneConfirm) {\r\n        return <Redirect to={'/sms'}/>\r\n    }\r\n\r\n    return (\r\n        <form className='recovery-form form' onSubmit={confirmPhoneFormik.handleSubmit}>\r\n            {isInitialized && <ErrorSnackbar/>}\r\n            <div className='recovery-form__inputs inputs'>\r\n                <div className=\"formik-input\">\r\n                    {confirmPhoneFormik.errors.confirmPhone ? <div className=\"formik\">{confirmPhoneFormik.errors.confirmPhone}</div> : null}\r\n                    <Input\r\n                        className='recovery-form__inputs-item'\r\n                        type=\"text\"\r\n                        placeholder=\"Введите ваш номер телефона\"\r\n                        name=\"confirmPhone\"\r\n                        formikProps={{...confirmPhoneFormik.getFieldProps('confirmPhone')}}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <Button className='recovery-form__button button'\r\n                    title={'Запросить пароль'}\r\n\r\n            />\r\n            <div className='recovery-form__links links'>\r\n                <a className='links-item' onClick={passwordAuthModeHandler}>Вспомнить пароль?</a>\r\n                <a className='links-item' onClick={registerModeHandler}>Регистрация</a>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from \"react\"\r\nimport {Input} from \"../components/Input\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../store/store\"\r\nimport {registerTC, setAuthModeAC} from \"../store/registration-reducer\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {setIsLoggedInAC, setRegisterModeAC} from \"../store/auth-reducer\"\r\nimport {useFormik} from \"formik\";\r\nimport {FormikErrorType} from \"./Auth\";\r\n\r\n\r\nexport const Registration = () => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            phone: '',\r\n            password:'',\r\n            avatar:''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.name) {\r\n                errors.name = 'Обязательное поле!';\r\n            }\r\n            if (!values.phone) {\r\n                errors.phone = 'Обязательное поле!';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Обязательное поле!';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(registerTC(values.phone, values.password,values.name, values.avatar))\r\n            dispatch(setRegisterModeAC(false))\r\n            dispatch(setIsLoggedInAC(true))\r\n        }\r\n    })\r\n\r\n    const authMode = useSelector<AppRootStateType, boolean>(state => state.register.authMode)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const authModeHandler = () => {\r\n        dispatch(setAuthModeAC(true))\r\n        dispatch(setRegisterModeAC(false))\r\n    }\r\n\r\n    if (authMode) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/cabinet'}/>\r\n    }\r\n    return (\r\n        <form className='registration-form form' onSubmit={formik.handleSubmit}>\r\n            <div className='registration-form__inputs inputs'>\r\n                {formik.errors.name ? <div className=\"formik\">{formik.errors.name}</div> : null}\r\n                <Input\r\n                    className='registration-form__inputs-item'\r\n                    type=\"text\"\r\n                    placeholder='Введите ваше имя'\r\n                    name=\"name\"\r\n                    formikProps={{...formik.getFieldProps('name')}}\r\n                />\r\n                {formik.errors.phone ? <div className=\"formik\">{formik.errors.phone}</div> : null}\r\n                <Input\r\n                    className='registration-form__inputs-item'\r\n                    type=\"tel\"\r\n                    placeholder='Введите ваш номер телефона'\r\n                    name=\"phone\"\r\n                    formikProps={{...formik.getFieldProps('phone')}}\r\n                />\r\n                {formik.errors.password ? <div className=\"formik\">{formik.errors.password}</div> : null}\r\n                <Input\r\n                    className='registration-form__inputs-item'\r\n                    type=\"password\"\r\n                    placeholder='Введите пароль'\r\n                    name=\"password\"\r\n                    formikProps={{...formik.getFieldProps('password')}}\r\n                />\r\n            </div>\r\n            <button className='registration-form__button button'>Регистрация</button>\r\n            <div className='registration-form__links links'>\r\n                <a className=\"links-item\" onClick={authModeHandler}>Авторизация</a>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../store/store\"\r\nimport {Button} from \"../components/Button\"\r\nimport {setIsLoggedInAC} from \"../store/auth-reducer\"\r\nimport {setAuthModeAC} from \"../store/registration-reducer\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport React, {useEffect} from \"react\"\r\n\r\n\r\nexport const PersonArea = () => {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        dispatch(setAuthModeAC(false))\r\n    },[])\r\n\r\n    const name = useSelector<AppRootStateType, string>(state => state.register.user.first_name)\r\n    const authMode = useSelector<AppRootStateType, boolean>(state => state.register.authMode)\r\n\r\n    const logOutHandler = () => {\r\n        dispatch(setIsLoggedInAC(false))\r\n        dispatch(setAuthModeAC(true))\r\n    }\r\n\r\n    if (authMode) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"form person\">\r\n            <div>{`Добрый день,${name ? name : 'Уважаемый посетитель'}`}</div>\r\n           <div onClick={logOutHandler}>\r\n               <Button  className={'person-button button'} title={\"Выход\"}/>\r\n           </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\nimport { makeStyles, Theme } from '@material-ui/core/styles'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}))\r\n\r\nexport default function CustomizedSnackbars() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true)\r\n\r\n    const handleClick = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n            <Snackbar  anchorOrigin={{ vertical: 'top', horizontal:'center' }} open={open} autoHideDuration={20000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"info\">\r\n                    Your SMS code: 5555\r\n                </Alert>\r\n            </Snackbar>\r\n    )\r\n}","import React from \"react\"\r\nimport {Input} from \"../components/Input\"\r\nimport {Button} from \"../components/Button\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../store/store\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {setPasswordRecoveryModeAC, setRegisterModeAC} from \"../store/auth-reducer\"\r\nimport {setAuthModeAC} from \"../store/registration-reducer\"\r\nimport {confirmSmsTC, setPhoneConfirmAC, setSmsConfirmAC} from \"../store/recovery-reducer\"\r\nimport {useFormik} from \"formik\"\r\nimport {FormikErrorType} from \"./Auth\"\r\nimport {ErrorSnackbar} from \"../utils/ErrorSnackbar\"\r\nimport CustomizedSnackbars from \"../utils/smsAlert\"\r\n\r\n\r\nexport const SmsConfirm = () => {\r\n\r\n    const SmsFormik = useFormik({\r\n        initialValues: {\r\n            sms: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.sms) {\r\n                errors.sms = 'Обязательное поле!';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(confirmSmsTC(values))\r\n        }\r\n    })\r\n\r\n    const registerMode = useSelector<AppRootStateType, boolean>(state => state.auth.registerMode)\r\n    const authMode = useSelector<AppRootStateType, boolean>(state => state.register.authMode)\r\n    const smsConfirm = useSelector<AppRootStateType, boolean>(state => state.recovery.smsConfirm)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.auth.isInitialized)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const registerModeHandler = () => {\r\n        dispatch(setPasswordRecoveryModeAC(false))\r\n        dispatch(setSmsConfirmAC(false))\r\n        dispatch(setAuthModeAC(false))\r\n        dispatch(setRegisterModeAC(true))\r\n    }\r\n\r\n    const authModeHandler = () => {\r\n        dispatch(setPhoneConfirmAC(false))\r\n        dispatch(setRegisterModeAC(false))\r\n        dispatch(setPasswordRecoveryModeAC(false))\r\n        dispatch(setSmsConfirmAC(false))\r\n        dispatch(setAuthModeAC(true))\r\n    }\r\n\r\n    if (registerMode) {\r\n        return <Redirect to={'/registration'}/>\r\n    }\r\n\r\n    if (authMode) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    if (smsConfirm) {\r\n        return <Redirect to={'/password'}/>\r\n    }\r\n\r\n    return (\r\n                <>\r\n                    <form className='recovery-form form' onSubmit={SmsFormik.handleSubmit}>\r\n                        {isInitialized && <ErrorSnackbar/>}\r\n                        <div className='recovery-form__inputs inputs'>\r\n                            <div className=\"formik-input\">\r\n                                {SmsFormik.errors.sms ? <div className=\"formik\">{SmsFormik.errors.sms}</div> : null}\r\n                                <Input\r\n                                    className='recovery-form__inputs-item'\r\n                                    type=\"text\"\r\n                                    placeholder=\"Введите код из смс\"\r\n                                    name=\"sms\"\r\n                                    formikProps={{...SmsFormik.getFieldProps('sms')}}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <Button className='recovery-form__button button'\r\n                                title='Отправить код'/>\r\n                        <div className='recovery-form__links links'>\r\n                            <a className='links-item' onClick={authModeHandler}>Вспомнить пароль?</a>\r\n                            <a className='links-item' onClick={registerModeHandler}>Регистрация</a>\r\n                        </div>\r\n                    </form>\r\n                    <CustomizedSnackbars/>\r\n                </>\r\n    )\r\n}","import React from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../store/store\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {setPasswordRecoveryModeAC, setRegisterModeAC} from \"../store/auth-reducer\"\r\nimport {setAuthModeAC} from \"../store/registration-reducer\"\r\nimport { setSmsConfirmAC} from \"../store/recovery-reducer\"\r\n\r\n\r\nexport const Password = () => {\r\n\r\n    const registerMode = useSelector<AppRootStateType, boolean>(state => state.auth.registerMode)\r\n    const authMode = useSelector<AppRootStateType, boolean>(state => state.register.authMode)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const passwordAuthModeHandler = () => {\r\n        dispatch(setAuthModeAC(true))\r\n        dispatch(setRegisterModeAC(false))\r\n        dispatch(setPasswordRecoveryModeAC(false))\r\n        dispatch(setSmsConfirmAC(false))\r\n    }\r\n\r\n    if (registerMode) {\r\n        return <Redirect to={'/registration'}/>\r\n    }\r\n\r\n    if (authMode) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <form className='form'>\r\n            <div className=\"form-confirm\"> Уважаемый пользователь, Ваш пароль: <b>1234567890</b></div>\r\n            <div className='links'>\r\n                <a className='links-item' onClick={passwordAuthModeHandler}>Авторизация</a>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from 'react'\nimport {Auth} from \"./pages/Auth\"\nimport './styles/style.scss'\nimport {PasswordRecovery} from \"./pages/PasswordRecovery\"\nimport {Registration} from \"./pages/Registration\"\nimport {HashRouter, Route, Switch} from 'react-router-dom'\nimport {PersonArea} from \"./pages/PersonArea\"\nimport {SmsConfirm} from \"./pages/SmsConfirm\"\nimport {Password} from \"./pages/Password\"\n\n\nfunction App() {\n\n\n    return (\n        <div className=\"App\">\n            <HashRouter>\n                <Switch>\n                    <Route exact path={'/'} render={() => <Auth/>}/>\n                    <Route path={'/registration'} render={() => <Registration/>}/>\n                    <Route path={'/recovery'} render={() => <PasswordRecovery/>}/>\n                    <Route path={'/cabinet'} render={() => <PersonArea/>}/>\n                    <Route path={'/sms'} render={() => <SmsConfirm/>}/>\n                    <Route path={'/password'} render={() => <Password/>}/>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {authReducer} from \"./auth-reducer\"\r\nimport {registerReducer} from \"./registration-reducer\"\r\nimport {recoveryReducer} from \"./recovery-reducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    recovery: recoveryReducer\r\n})\r\n\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport { BrowserRouter } from 'react-router-dom'\nimport {Provider} from \"react-redux\"\nimport {store} from \"./store/store\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n          <Provider store={store}>\n              <App/>\n          </Provider>\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}